<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HW02</name>
    </assembly>
    <members>
        <member name="F:HW02.Common.LoggingEvents.GetItem">
            <summary>
            The get item
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.InsertItem">
            <summary>
            The insert item
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.UpdateItem">
            <summary>
            The update item
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.DeleteItem">
            <summary>
            The delete item
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.GetItemNotFound">
            <summary>
            The get item not found
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.UpdateItemNotFound">
            <summary>
            The update item not found
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.DeleteItemNotFound">
            <summary>
            The delete item not found
            </summary>
        </member>
        <member name="F:HW02.Common.LoggingEvents.InternalError">
            <summary>
            The internal error
            </summary>
        </member>
        <member name="T:HW02.Controllers.TasksController">
            <summary>
            provides the implementation for the Tasks resource
            </summary>
        </member>
        <member name="F:HW02.Controllers.TasksController.GetTasksByIdRoute">
            <summary>
            get tasks by id
            </summary>
        </member>
        <member name="F:HW02.Controllers.TasksController._context">
            <summary>
            DB context
            </summary>
        </member>
        <member name="F:HW02.Controllers.TasksController._logger">
            <summary>
            logger instance
            </summary>
        </member>
        <member name="F:HW02.Controllers.TasksController._configuration">
            <summary>
            The configuration instance
            </summary>
        </member>
        <member name="F:HW02.Controllers.TasksController._tasksLimits">
            <summary>
            the task limits settings
            </summary>
        </member>
        <member name="M:HW02.Controllers.TasksController.#ctor(Microsoft.Extensions.Logging.ILogger{HW02.Controllers.TasksController},HW02.Data.TaskDatabaseContext,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{HW02.CustomSettings.TasksLimits})">
            <summary>
            Inititilize instance of TasksController
            </summary>
        </member>
        <member name="M:HW02.Controllers.TasksController.GetTasksById(System.Int32)">
            <summary>
            Gets Task by id
            </summary>
            <param name="id"></param>
            <returns>the task resource</returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.GetAllTasks">
            <summary>
            Gets the list of tasks
            </summary>
            <returns>The list of tasks</returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.UpdateTasks(System.Int32,HW02.DataTransferObjects.TasksUpdatePayload)">
            <summary>
            Updates or creates a task
            </summary>
            <param name="id"></param>
            <param name="tasksUpdatePayload"></param>
            <returns></returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.CanAddMoreTasks">
            <summary>
            Determines whether tasks can be added.
            </summary>
            <returns>
              true if more tasks can be added false if not
            </returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.TaskNameIsUnique(System.String)">
            <summary>
            Find out if the task name is already in use
            </summary>
            <param name="taskName">String that should be the taskname to check for exhistance</param>
            <returns></returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.DeleteTaskById(System.Int32)">
            <summary>
            Deletes the task
            </summary>
            <param name="id">The identifier of the tasks.</param>        
            <returns>An IAction result indicating HTTP 204 no content if success otherwise BadRequest if the input is not valid.</returns>
        </member>
        <member name="M:HW02.Controllers.TasksController.CreateTask(HW02.DataTransferObjects.TasksCreatePayload)">
            <summary>
            Creates the task
            </summary>
            <param name="taskCreatePayload">The task.</param>
            <returns>An IAction result indicating HTTP 201 created if success otherwise BadRequest if the input is not valid.</returns>
        </member>
        <member name="T:HW02.CustomSettings.TasksLimits">
            <summary>
            Defines the limits on our Tasks
            </summary>
        </member>
        <member name="P:HW02.CustomSettings.TasksLimits.MaxTasks">
            <summary>
            Gets or sets the maximum tasks
            </summary>
            <value>
            Maximum number of tasks
            </value>
        </member>
        <member name="T:HW02.DataTransferObjects.PublicErrorResponse">
            <summary>
            provide object for error responses
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.PublicErrorResponse.errorNumber">
            <summary>
            error number code
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.PublicErrorResponse.parameterName">
            <summary>
            the name of the paramter that caused the error
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.PublicErrorResponse.parameterValue">
            <summary>
            the value of the paramater that caused the error
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.PublicErrorResponse.errorDescription">
            <summary>
            Error Description
            </summary>
        </member>
        <member name="T:HW02.DataTransferObjects.TasksCreatePayload">
            <summary>
            tasks creation payload
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksCreatePayload.Id">
            <summary>
            task ID
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksCreatePayload.TaskName">
            <summary>
            gets or sets the task name
            </summary>
            <value>name
            </value>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksCreatePayload.IsCompleted">
            <summary>
            sets completed status
            </summary>
            <value>
            true or false
            </value>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksCreatePayload.DueDate">
            <summary>
            gets or sets the due date
            </summary>
            <value>
            string holding date yyyy-MM-dd
            </value>
        </member>
        <member name="M:HW02.DataTransferObjects.TasksCreatePayload.ToString">
            <summary>
            return a <see cref="T:System.String"/> that represents this instance
            </summary>
            <returns>return a <see cref="T:System.String"/> that represents this instance</returns>
        </member>
        <member name="T:HW02.DataTransferObjects.TasksResult">
            <summary>
            Define the public facing tasks attributes
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksResult.Id">
            <summary>
            gets or sets task id
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksResult.TaskName">
            <summary>
            gets or sets the name
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksResult.IsCompleted">
            <summary>
            gets or sets Is Completed Status
            </summary>
            <value>
            true or false 
            </value>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksResult.DueDate">
            <summary>
            gets or sets the due date
            </summary>
            <value>
            string with date yyyy-MM-dd
            </value>
        </member>
        <member name="T:HW02.DataTransferObjects.TasksUpdatePayload">
            <summary>
            This is the payload to update tasks
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksUpdatePayload.TaskName">
            <summary>
            gets or sets the task name
            </summary>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksUpdatePayload.IsCompleted">
            <summary>
            gets or sets IsCompleted flag
            </summary>
            <value>
            IsCompleted true or false
            </value>
        </member>
        <member name="P:HW02.DataTransferObjects.TasksUpdatePayload.DueDate">
            <summary>
            gets or sets the due date
            </summary>
            <value>
            string with date in format yyyy-MM-dd
            </value>
        </member>
        <member name="M:HW02.DataTransferObjects.TasksUpdatePayload.ToString">
            <summary>
            returns <see cref="T:System.String"/> of property values in instance
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance</returns>
        </member>
        <member name="T:HW02.Data.DBInitilizer">
            <summary>
            check if there is data in DB and seed some starter data
            </summary>
        </member>
        <member name="M:HW02.Data.DBInitilizer.Initialize(HW02.Data.TaskDatabaseContext)">
            <summary>
            check the status and seed data if needed
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:HW02.Data.TaskDatabaseContext">
            <summary>
            Coordinate our Tasks model with Entity framework
            </summary>
        </member>
        <member name="M:HW02.Data.TaskDatabaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{HW02.Data.TaskDatabaseContext})">
            <summary>
            Inititialize new instance of <see cref="T:HW02.Data.TaskDatabaseContext"/> class
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:HW02.Data.TaskDatabaseContext.Tasks">
            <summary>
            Represents the Tasks table
            </summary>
            <value>
            The tasks
            </value>
        </member>
        <member name="M:HW02.Data.TaskDatabaseContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            override to provide the mapping of Tasks model to the database table
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:HW02.Models.Tasks">
            <summary>
            the task entity
            </summary>
        </member>
        <member name="P:HW02.Models.Tasks.Id">
            <summary>
            generate the key on db. we'll let this happen automagically
            </summary>
        </member>
        <member name="P:HW02.Models.Tasks.TaskName">
            <summary>
            This is the name of the task
            It is required
            takes a string
            </summary>
        </member>
        <member name="P:HW02.Models.Tasks.IsCompleted">
            <summary>
            flag if task is completed or not
            this is required
            </summary>
        </member>
        <member name="P:HW02.Models.Tasks.DueDate">
            <summary>
            Due data of the task it is required
            takes type string
            </summary>
        </member>
        <member name="M:HW02.Models.Tasks.ValidateNameCompletedDate(HW02.Models.Tasks)">
            <summary>
            Validates the Task, Completed Status and Date
            </summary>
            <param name="task">the task object</param>
            <param name="context">value of the field that the validator is validating</param>
            <returns></returns>
        </member>
        <member name="M:HW02.Models.Tasks.IsNotNullTaskName(System.String)">
            <summary>
            check the taskname is not null
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:HW02.Models.Tasks.IsValidTaskName(System.String)">
            <summary>
            validation that the task name is not greater than 100
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:HW02.Models.Tasks.IsNotNullDueDate(System.String)">
            <summary>
            Check that due date is not null or empty
            </summary>
            <param name="dueDate"></param>
            <returns></returns>
        </member>
        <member name="M:HW02.Models.Tasks.IsValidDueDate(System.String)">
            <summary>
            check that the date format matches yyyy-MM-dd
            </summary>
            <param name="dueDate"></param>
            <returns></returns>
        </member>
        <member name="M:HW02.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            initilize instance of <see cref="T:HW02.Startup"/> class
            </summary>
            <param name="configuration"></param>
            <param name="hostingEnvironment"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HW02.Startup.HostingEnvironment" -->
        <member name="P:HW02.Startup.Configuration">
            <summary>
            Gets the configuration settings
            </summary>
            <value>
            The configuration settings
            </value>
        </member>
        <member name="M:HW02.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
             This method gets called by the runtime. Use this method to add services to the container.
             </summary>
             <param name="services">services</param>
        </member>
        <member name="M:HW02.Startup.ConfigureSwaggerUI(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Swagger: configure the swagger UI
            </summary>
            <param name="swaggerGenOptions">The swaggerGenOptions</param>
        </member>
        <member name="M:HW02.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            configure the http request pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
